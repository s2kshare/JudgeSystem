// <auto-generated />
using Judge_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Judge_Backend.Migrations
{
    [DbContext(typeof(JudgeDbContext))]
    [Migration("20241115113839_ModelRestructure")]
    partial class ModelRestructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Judge_Backend.Models.Enrollment", b =>
                {
                    b.Property<int>("PaperID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("PaperID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Judge_Backend.Models.Lab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExampleInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabNumber")
                        .HasColumnType("int");

                    b.Property<string>("LabOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaperID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PaperID");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Judge_Backend.Models.LabSubmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("ExecutedCorrectly")
                        .HasColumnType("bit");

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("source_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.HasIndex("UserID");

                    b.ToTable("LabSubmissions");
                });

            modelBuilder.Entity("Judge_Backend.Models.Paper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.HasIndex("TeacherID");

                    b.HasIndex("TeacherID1");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Judge_Backend.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Judge_Backend.Models.Admin", b =>
                {
                    b.HasBaseType("Judge_Backend.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Judge_Backend.Models.Student", b =>
                {
                    b.HasBaseType("Judge_Backend.Models.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Judge_Backend.Models.Teacher", b =>
                {
                    b.HasBaseType("Judge_Backend.Models.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Judge_Backend.Models.Enrollment", b =>
                {
                    b.HasOne("Judge_Backend.Models.Paper", "Paper")
                        .WithMany()
                        .HasForeignKey("PaperID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Judge_Backend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Judge_Backend.Models.Lab", b =>
                {
                    b.HasOne("Judge_Backend.Models.Paper", "Paper")
                        .WithMany("Labs")
                        .HasForeignKey("PaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Judge_Backend.Models.LabSubmission", b =>
                {
                    b.HasOne("Judge_Backend.Models.Lab", "Lab")
                        .WithMany("LabSubmissions")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Judge_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Judge_Backend.Models.Paper", b =>
                {
                    b.HasOne("Judge_Backend.Models.Admin", null)
                        .WithMany("EnrolledPapers")
                        .HasForeignKey("AdminID");

                    b.HasOne("Judge_Backend.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Judge_Backend.Models.Teacher", null)
                        .WithMany("EnrolledPapers")
                        .HasForeignKey("TeacherID1");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Judge_Backend.Models.Lab", b =>
                {
                    b.Navigation("LabSubmissions");
                });

            modelBuilder.Entity("Judge_Backend.Models.Paper", b =>
                {
                    b.Navigation("Labs");
                });

            modelBuilder.Entity("Judge_Backend.Models.Admin", b =>
                {
                    b.Navigation("EnrolledPapers");
                });

            modelBuilder.Entity("Judge_Backend.Models.Teacher", b =>
                {
                    b.Navigation("EnrolledPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
